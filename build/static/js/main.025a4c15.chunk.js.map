{"version":3,"sources":["components/profImage/profImage.module.css","data/Suyogya-Resume.doc","data/profPic.png","components/routes/routes.module.css","components/socialMediaLinks/Social.module.css","components/routes/routes.js","components/button/Button.js","components/socialMediaLinks/Social.js","components/profImage/profImage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Routes","className","classes","ulist","list","to","Button","props","href","Resume","download","onclick","console","log","name","Social","fb","target","lkin","git","ProfImage","container","image","src","profPic","alt","App","type","duration","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,UAAY,6BAA6B,MAAQ,2B,mBCDnED,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,qC,2ECC3CD,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,KAAO,uB,4DCAvDD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,GAAK,mBAAmB,KAAO,qBAAqB,IAAM,sB,yHCsBzFC,EAjBF,WACT,OACI,oCACI,kBAAC,IAAD,KACA,wBAAIC,UAAWC,IAAQC,OACnB,wBAAIF,UAAWC,IAAQE,MAAM,kBAAC,IAAD,CAAMC,GAAG,UAAS,qCAA/C,OACA,wBAAIJ,UAAWC,IAAQE,MAAvB,KACA,wBAAIH,UAAWC,IAAQE,MAAM,kBAAC,IAAD,CAAMC,GAAG,SAAT,SAC7B,wBAAIJ,UAAWC,IAAQE,MAAvB,KACA,wBAAIH,UAAWC,IAAQE,MAAM,kBAAC,IAAD,CAAMC,GAAG,YAAT,gB,+BCO9BC,EAjBF,SAACC,GAMV,OACI,oCACC,uBAAGC,KAAMC,IAAQC,UAAQ,GAAC,uCAAKT,UAAU,SAASU,QANlC,WACjBC,QAAQC,IAAI,oBAKoEN,GAC3EA,EAAMO,S,uBCOJC,EAfA,WACX,OACI,oCAEI,4BACI,wBAAId,UAAWC,IAAQE,MAAM,uBAAGH,UAAWC,IAAQc,GAAIR,KAAK,wCAAwCS,OAAO,UAAS,kBAAC,IAAD,QACpH,wBAAIhB,UAAWC,IAAQE,MAAM,uBAAGH,UAAWC,IAAQgB,KAAMV,KAAK,wDAAwDS,OAAO,UAAS,kBAAC,IAAD,QACtI,wBAAIhB,UAAWC,IAAQE,MAAM,uBAAGH,UAAWC,IAAQiB,IAAKX,KAAK,kDAAkDS,OAAO,UAAS,kBAAC,IAAD,W,kCCAhIG,EARC,WACZ,OACI,yBAAKnB,UAAWC,IAAQmB,WACpB,yBAAKpB,UAAWC,IAAQoB,MAAOC,IAAKC,IAASC,IAAI,sBCsC9CC,MAlCf,WAcE,OACE,yBAAKzB,UAAU,OACb,uEAIA,wBAAIA,UAAU,QACZ,kBAAC,YAAD,CAAW0B,KAAK,KAAKC,SAAS,MAA9B,yBAIF,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQd,KAAK,oBACb,kBAAC,EAAD,QC5Bce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.025a4c15.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"profImage_container__qmRdI\",\"image\":\"profImage_image__kb5Lv\"};","module.exports = __webpack_public_path__ + \"static/media/Suyogya-Resume.c29ff393.doc\";","module.exports = __webpack_public_path__ + \"static/media/profPic.f9f16c51.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ulist\":\"routes_ulist__3MH8L\",\"list\":\"routes_list__2ivP7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Social_list__71DXn\",\"fb\":\"Social_fb__rurR0\",\"lkin\":\"Social_lkin__2fKv4\",\"git\":\"Social_git__233SI\"};","import React from 'react';\nimport {BrowserRouter as Router, Link} from 'react-router-dom';\n\nimport classes from './routes.module.css'\n\n\nconst Routes=()=>{\n    return(\n        <>\n            <Router>\n            <ul className={classes.ulist}>\n                <li className={classes.list}><Link to=\"/about\"><a>About</a></Link>   </li>\n                <li className={classes.list}>/</li>\n                <li className={classes.list}><Link to=\"/work\">Work</Link></li> \n                <li className={classes.list}>/</li>\n                <li className={classes.list}><Link to=\"/contact\">Contact</Link></li> \n            </ul>    \n            </Router>\n        \n        </>\n    );\n}\n\nexport default Routes;","import React from 'react';\nimport './Button.css'\n\nimport Resume from '../../data/Suyogya-Resume.doc'\n\nconst Button=(props)=>{\n\n    const onClickHandler=()=>{\n        console.log('Button Clicked')\n    }\n\n    return(\n        <>\n         <a href={Resume} download><div className='button' onclick={onClickHandler} {...props}>\n            {props.name}\n        </div>\n       </a>\n    \n        </>\n    );\n}\n\nexport default Button;","import React from 'react';\nimport { FaFacebookSquare,FaLinkedin,FaGithubSquare} from 'react-icons/fa'\n\nimport classes from './Social.module.css'\n\n\nconst Social = () => {\n    return (\n        <>\n\n            <ul> \n                <li className={classes.list}><a className={classes.fb} href=\"https://www.facebook.com/suyogyabsnt/\" target=\"_blank\"><FaFacebookSquare/></a></li>\n                <li className={classes.list}><a className={classes.lkin} href=\"https://www.linkedin.com/in/suyogya-basnet-68a7481b0/\" target=\"_blank\"><FaLinkedin/></a></li>\n                <li className={classes.list}><a className={classes.git} href=\"https://github.com/suyogyabsnt?tab=repositories\" target=\"_blank\"><FaGithubSquare/></a></li>\n            </ul>\n\n        </>\n\n    );\n}\n\nexport default Social;","import React from 'react';\n\nimport classes from './profImage.module.css'\nimport profPic from '../../data/profPic.png'\n\nconst ProfImage=()=>{\n    return(\n        <div className={classes.container}>\n            <img className={classes.image} src={profPic} alt='Profile Picture'></img>\n        </div>\n    );\n}\n\nexport default ProfImage;","import React from 'react';\nimport SplitText from 'react-pose-text';\nimport { TextFocus } from 'react-text-effects';\n\n\nimport Routes from './components/routes/routes';\nimport './App.css';\nimport Button from './components/button/Button';\nimport SocialMedia from './components/socialMediaLinks/Social';\nimport ProfPic from './components/profImage/profImage'\nimport ProfImage from './components/profImage/profImage';\n\nfunction App() {\n  const charPoses = {\n    exit: { y: 20, opacity: 0 },\n    enter: {\n      y: 0,\n      opacity: 1,\n      transition: ({ charInWordIndex }) => ({\n        type: 'spring',\n        delay: charInWordIndex * 30,\n        stiffness: 500 + charInWordIndex * 150,\n        damping: 10 - charInWordIndex * 1\n      })\n    }\n  };\n  return (\n    <div className=\"App\">\n      <h3>\n        Front End Developer - React/ReactNative\n      </h3>\n\n      <h1 className=\"Name\">\n        <TextFocus type='in' duration='2s'>Suyogya Singh Basnet\n      \n        </TextFocus>\n      </h1>\n      <ProfImage />\n      <SocialMedia/>\n      <Button name='Download Resume'/>\n      <Routes />\n\n    </div>\n\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}